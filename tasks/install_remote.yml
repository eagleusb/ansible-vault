---

- name: "vault | os packages"
  package:
    name: "{{ vault_os_packages }}"
    state: present

- name: "vault | ensure remote vault dir exists"
  file:
    path: "/tmp/vault"
    state: "directory"
    mode: 0755

- name: "vault | check vault package checksum file"
  stat:
    path: "/tmp/vault/{{ vault_shasums }}"
  register: "vault_checksum"

- name: "vault | get vault package checksum file"
  get_url:
    url: "{{ vault_checksum_file_url }}"
    dest: "/tmp/vault/{{ vault_shasums }}"
  when: "not vault_checksum.stat.exists | bool"

- name: "vault | get vault package checksum"
  shell: "grep {{ vault_pkg }} /tmp/vault/{{ vault_shasums }}"
  register: "vault_sha256"
  tags: skip_ansible_lint

- name: "vault | check vault package file"
  stat:
    path: "/tmp/vault/{{ vault_pkg }}"
  register: "vault_package"

# TODO: use unarchive
- name: "vault | download vault â†’ {{ vault_zip_url }}"
  get_url:
    url: "{{ vault_zip_url }}"
    dest: "/tmp/vault/{{ vault_pkg }}"
    checksum: "sha256:{{ vault_sha256.stdout.split(' ')|first }}"
    timeout: 42
  when: "not vault_package.stat.exists | bool"

- name: "vault | unarchive vault and install binary"
  unarchive:
    remote_src: true
    src: "/tmp/vault/{{ vault_pkg }}"
    dest: "{{ vault_bin_path }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0755
  notify: "restart vault"

- name: "vault | cleanup tmp installation directory"
  file:
    path: "/tmp/vault"
    state: "absent"
