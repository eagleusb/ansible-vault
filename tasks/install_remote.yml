---

- name: "vault | ensure remote vault dir exists"
  tempfile:
    prefix: "vault-install-"
    state: "directory"
  register: "vault_install_path"

- name: "vault | get vault package checksums file"
  get_url:
    url: "{{ vault_checksum_file_url }}"
    dest: "{{ vault_install_path.path }}/{{ vault_shasums }}"
    force: true
    mode: "0600"

- name: "vault | get vault package checksum"
  shell: "grep {{ vault_pkg }} {{ vault_install_path.path }}/{{ vault_shasums }}"
  register: "vault_sha256"
  tags: skip_ansible_lint

- name: "vault | download vault â†’ {{ vault_zip_url }}"
  get_url:
    url: "{{ vault_zip_url }}"
    dest: "{{ vault_install_path.path }}/{{ vault_pkg }}"
    checksum: "sha256:{{ vault_sha256.stdout.split(' ') | first() }}"
    timeout: 42
    force: false
    mode: "0600"

- name: "vault | ensure vault is stopped before upgrade"
  service:
    name: "{{ vault_systemd_service_name }}"
    state: "stopped"
  when: "vault_upgrade_inplace | bool()"

# TODO: support proper binary replacement if upgrade in-place
- name: "vault | unarchive vault and install binary"
  unarchive:
    src: "{{ vault_install_path.path }}/{{ vault_pkg }}"
    dest: "{{ vault_bin_path }}"
    remote_src: true
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0755"

- name: "vault | cleanup tmp installation directory"
  file:
    path: "{{ vault_install_path.path }}"
    state: "absent"
