---

- name: "vault | include asserts"
  import_tasks: "asserts.yml"

- block:
    - name: "vault | add vault group"
      group:
        name: "{{ vault_group }}"
        state: present
      when: vault_manage_group | bool

    - name: "vault | add vault user"
      user:
        name: "{{ vault_user }}"
        comment: "vault user"
        group: "{{ vault_group }}"
        groups: "{{ vault_groups }}"
        system: true
      when: vault_manage_user | bool
  become: true

- name: "vault | include os-specific variables"
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_os_family }}{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family }}.yml"
      paths:
        - vars

- name: "vault | check vault installation"
  shell: "command -v vault"
  environment:
    PATH: "{{ vault_bin_path }}:{{ ansible_env.PATH }}"
  args:
    executable: "/bin/bash"
  register: "vault_installation"
  changed_when: false
  ignore_errors: true
  check_mode: false
  tags: "skip_ansible_lint"

- name: "vault | get installed vault version"
  shell: |
    set -o pipefail
    {{ vault_installation.stdout }} -version | cut -d' ' -f2 | tr -d 'v'
  args:
    executable: "/bin/bash"
  register: "installed_vault_version"
  changed_when: false
  check_mode: false
  when: "not vault_installation is failed"
  tags: "skip_ansible_lint"

- name: "vault | compute if installation is required"
  set_fact:
    installation_required: "{{ vault_installation is failed or installed_vault_version.stdout != vault_version }}"

- name: "vault | vault enterprise installation (local)"
  include_tasks: "install_enterprise.yml"
  when:
    - vault_enterprise | bool
    - not vault_install_remotely | bool
    - not vault_install_remote_repo | bool
    - installation_required | bool

- name: "vault | vault installation (local)"
  include_tasks: "install.yml"
  when:
    - not vault_enterprise | bool
    - not vault_install_remotely | bool
    - not vault_install_hashi_repo | bool
    - installation_required | bool

- name: "vault | vault installation (repository)"
  include_tasks: "install_hashi_repo.yml"
  when:
    - not vault_enterprise | bool
    - not vault_install_remotely | bool
    - vault_install_hashi_repo | bool
    - installation_required | bool

- name: "vault | vault installation (remotely)"
  include_tasks: "install_remote.yml"
  when:
    - not vault_enterprise | bool
    - vault_install_remotely | bool
    - not vault_install_hashi_repo | bool
    - installation_required | bool

- name: "vault | check vault mlock capability"
  become: true
  command: "setcap cap_ipc_lock=+ep {{ vault_bin_path }}/vault"
  changed_when: false  # read-only task
  ignore_errors: true
  register: "vault_mlock_capability"

- name: "vault | enable non root mlock capability"
  become: true
  command: "setcap cap_ipc_lock=+ep {{ vault_bin_path }}/vault"
  when: "vault_mlock_capability is failed"

- name: "vault | create directories"
  become: true
  file:
    dest: "{{ item }}"
    state: "directory"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
  loop:
    - "{{ vault_config_path }}"
    - "{{ vault_plugin_path }}"
    - "{{ vault_data_path }}"
    - "{{ vault_log_path }}"
    - "{{ vault_run_path }}"

- name: "vault | enable logrotate"
  template:
    src: "{{ vault_logrotate_template }}"
    dest: "/etc/logrotate.d/vault"
    owner: "root"
    group: "root"
    mode: 0644
  when: "vault_enable_logrotate | bool"

- name: "vault | include tls configuration"
  include_tasks: "tls.yml"
  when: "vault_tls_disable == 0"

- name: "vault | include backend tls configuration"
  include_tasks: "tls_backend.yml"
  when: "vault_tls_gossip == 1"

# TODO: move
- name: "vault | gcp credentials for auto-unseal"
  copy:
    src: "{{ vault_gkms_credentials_src_file }}"
    dest: "{{ vault_gkms_credentials }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0600
  when: "vault_gkms | bool"

- name: "vault | main configuration template"
  become: true
  template:
    src: "{{ vault_main_configuration_template }}"
    dest: "{{ vault_main_config }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0600
  notify: "restart vault"

- name: "vault | set exec output to log path when enabled log"
  set_fact:
    vault_exec_output: "2>&1 >> {{ vault_log_path }}/vault.log"
  when: "vault_enable_log"

# TODO: move
- name: "vault | bsd init script"
  template:
    src: "{{ vault_bsdinit_template }}"
    dest: "/etc/rc.d/vault"
    owner: "root"
    group: wheel
    mode: 0755
  when: "ansible_os_family == 'FreeBSD'"

- name: "vault | sysv init script"
  template:
    src: "{{ vault_sysvinit_template }}"
    dest: "/etc/init.d/vault"
    owner: "root"
    group: "root"
    mode: 0755
  when:
    - "not ansible_service_mgr == 'systemd'"
    - "not ansible_os_family == 'Debian'"
    - "not ansible_os_family == 'FreeBSD'"
    - "not ansible_os_family == 'Solaris'"

- name: "vault | debian init script"
  template:
    src: "{{ vault_debian_init_template }}"
    dest: /etc/init.d/vault
    owner: "root"
    group: "root"
    mode: 0755
  when:
    - "not ansible_service_mgr == 'systemd'"
    - "ansible_os_family == 'Debian'"
    - "not ansible_os_family == 'FreeBSD'"
    - "not ansible_os_family == 'Solaris'"

- name: "vault | extract systemd version"
  shell: |
    set -o pipefail
    systemctl --version systemd | head -n 1 | cut -d' ' -f2
  args:
    executable: "/bin/bash"
  changed_when: false
  check_mode: false
  register: "systemd_version"
  when:
    - "ansible_service_mgr == 'systemd'"
    - "not ansible_os_family == 'FreeBSD'"
    - "not ansible_os_family == 'Solaris'"
  tags: "skip_ansible_lint"

- name: "vault | systemd unit"
  become: true
  template:
    src: "{{ vault_systemd_template }}"
    dest: "/lib/systemd/system/{{ vault_systemd_service_name }}.service"
    force: "yes"
    owner: "root"
    group: "root"
    mode: 0644
  register: "systemd_unit"
  notify: "daemon-reload systemd"
  when:
    - "ansible_service_mgr == 'systemd'"
    - "not ansible_os_family == 'FreeBSD'"
    - "not ansible_os_family == 'Solaris'"
    - "systemd_version is defined"

# TODO: handler
- name: "vault | start vault"
  become: true
  service:
    name: "{{ vault_systemd_service_name }}"
    state: "started"
    enabled: true

# TODO: needs ?
- name: "vault | restart vault if needed"
  meta: "flush_handlers"

# TODO: move
- name: "vault | add vault_addr environment variable in bashrc"
  lineinfile:
    path: "{{ vault_home }}/.bashrc"
    line: "export VAULT_ADDR='{{ vault_tls_disable | ternary('http', 'https') }}://{{ vault_address }}:{{ vault_port }}'"
    create: true
  when: "ansible_os_family != 'Windows'"

- name: "vault | add vault_cacert environment variable in bashrc"
  lineinfile:
    path: "{{ vault_home }}/.bashrc"
    line: "export VAULT_CACERT={{ vault_tls_config_path }}/{{ vault_tls_ca_file }}"
    create: true
  when:
    - "not vault_tls_disable | bool"
    - "ansible_os_family != 'Windows'"

- name: Initialize Vault
  include_tasks: "init.yml"
  when: "vault_init | bool()"

- name: "vault | check vault api status"
  vars:
    vault_addr_protocol: "{{ vault_tls_disable | ternary('http', 'https') }}"
    vault_addr: "{{ (vault_address == '0.0.0.0') | ternary('127.0.0.1', vault_address) }}"
  uri:
    validate_certs: "{{ validate_certs_during_api_reachable_check | bool }}"
    url: "{{ vault_addr_protocol }}://{{ vault_hostname | default(vault_addr, true) }}:{{ vault_port }}/v1/sys/health"
    method: GET
    # 200 if initialized, unsealed, and active
    # 429 if unsealed and standby
    # 472 if data recovery mode replication secondary and active
    # 473 if performance standby
    # 501 if not initialized
    # 503 if sealed
    # See: https://www.vaultproject.io/api/system/health.html
    status_code: 200, 429, 472, 473, 501, 503
    body_format: json
  register: "check_result"
  retries: 6
  until: "check_result is succeeded"
  delay: 10
  changed_when: false

- name: "vault | current vault api status"
  debug:
    msg: "Vault is {{ vault_http_status[check_result.status | string()] }}"
